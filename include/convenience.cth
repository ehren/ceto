# def (foo<T> -> def (foo:template<typename:T>
defmacro(def (func_name<T>:specifier, args), func_name, T: Identifier, specifier: Node|None, args: [Node]:
    template_header: Node = quote(template<typename:unquote(T)>)
    specified_template = if (specifier:
        specified: Node = quote(unquote(template_header):unquote(specifier))
        specified
    else:
        template_header
    )
    new_args: mut:[Node] = [quote(unquote(func_name):unquote(specified_template))]
    unsafe (:
        new_args.insert(new_args.end(), args.begin(), args.end())
    )
    return Call(quote(def), new_args)
)

# canonical empty destructor to default destructor:
# e.g.
# def (destruct:virtual:
#     pass
# )
# goes to
# def (destruct:virtual) = default
# For an empty non-default destructor
# use pass; pass
defmacro (def (destruct:specifier:
    pass
), specifier: Node|None:
    name: Node = quote(destruct)
    destructor = if (specifier:
        specified: Node = quote(unquote(name): unquote(specifier))
        specified
    else:
        name
    )
    return quote(def (unquote(destructor)) = default)
)

# note codegen.py contains checks to prevent using { } as an anonymous scope
defmacro(scope (:
    stmts
), stmts: [Node]:
    block = Block(stmts)
    # Note that codegen currently doesn't allow constexpr-if to be an
    # if-expression. We should consider changing this (and TODO make
    # if (...) : noexpression for the "I don't want an expression-if case")
    return quote(if (1, unquote(block)): constexpr)
)

defmacro (None:type, type:
    return quote((lambda(:
        return None
    ): unquote(type)) ())
)

# works around some limitations of CTAD with map e.g.
# https://stackoverflow.com/questions/56104324/does-class-template-argument-deduction-works-with-stdmap
defmacro(m: west_specifier:std.map:east_specifier = {keyvals}, keyvals: [TypeOp],
         m: Identifier, map: Identifier, west_specifier: Node|None, east_specifier: Node|None:

    if (map.name() != "map" and map.name() != "unordered_map":
        return None
    )

    args: mut:[Node] = []
    keys: mut:[Node] = []

    vacuous: Node = quote(True)
    assertion: mut = vacuous
    map_type: mut = None:Node
    # ^ Note that we can't write mut:Node/Node:mut on the left (assertion and
    # map_type must be mut vars holding instances of Node aka Node:const aka const:Node)

    for (kv in keyvals:
        type = quote(std.(unquote(map))<decltype(unquote(kv.args.at(0))), decltype(unquote(kv.args.at(1)))>)
        if (not map_type:
            map_type = type
        else:
            assertion = quote(unquote(assertion) and std.is_same_v<unquote(type), unquote(map_type)>)
        )
        args.append(quote({unquote(kv.args.at(0)), unquote(kv.args.at(1))}))
        keys.append(kv.args.at(0))
    )

    comparator = lambda(a, b, a.equals(b))
    unsafe (:
        duplicate_iter = std.adjacent_find(keys.cbegin(), keys.cend(), comparator)
        if (duplicate_iter != keys.cend():
            # note there are cases where duplicate keys slip past e.g. { 1 - 1: "zero", 0: "zero"}
            throw (std.runtime_error("duplicate keys in map literal"))
        )
    )

    map_call = BracedCall(map_type, args)

    if (west_specifier:
        map_type = quote(unquote(west_specifier): unquote(map_type))
    )

    if (east_specifier:
        map_type = quote(unquote(map_type): unquote(east_specifier))
    )

    return quote(unquote(m): unquote(map_type) = lambda(:
        static_assert(unquote(assertion), "all key-value pairs must be of the same type in map literal")
        unquote(map_call)
    ) ())
)


# just for testing out performance consequences of safe for loops in selfhost (not too significant)
#defmacro (for(x:T in iterable, block), x, T: Node|None, iterable, block: Block:
#    t = if (T:
#        T
#    else:
#        full: Node = quote(const:auto:ref)
#        full
#    )
#
#    in_expr = quote(unquote(x): unquote(t) in unquote(iterable))
#
#    args: [Node] = [in_expr, block]
#
#    return Call(quote(unsafe_for), args)
#)
#
#defmacro (vec[index], vec, index:
#    if (vec.name() == "lambda":
#        return None
#    )
#
#    return quote(unquote(vec).unsafe[unquote(index)])
#)

