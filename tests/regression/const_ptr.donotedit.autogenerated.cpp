
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
struct Foo : public ceto::shared_object, public std::enable_shared_from_this<Foo> {

    int a;

        inline auto method() -> void {
            std::cout << "mut\n";
        }

        inline auto method() const -> void {
            std::cout << "const\n";
        }

    explicit Foo(int a) : a(a) {}

    Foo() = delete;

};

    template <typename ceto__private__T11>
auto calls_method(const ceto__private__T11& f) -> void {
        (*ceto::mad(f)).method();
        auto m { f } ;
        (*ceto::mad(m)).method();
    }

    auto main() -> int {
        const auto fc = ceto::make_shared_propagate_const<const Foo>(1);
        (*ceto::mad(fc)).method();
        const auto f { ceto::make_shared_propagate_const<Foo>(1) } ;
        static_assert(std::is_const_v<decltype(f)>);
        (*ceto::mad(f)).method();
        calls_method(f);
        calls_method(fc);
        auto m { f } ;
        auto m2 { fc } ;
        (*ceto::mad(m)).method();
        (*ceto::mad(m2)).method();
    }

