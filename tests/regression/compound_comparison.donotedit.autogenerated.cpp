
#include "ceto.h"

;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;

#include <array>
;
    auto main() -> int {
        if ((1 < 2) > 0) {
            std::cout << "yes";
        }
        const auto l = std::vector {{1, 2, 3}};
        const auto lp = (&l);
        if (0 < lp -> size()) {
            std::cout << "ok";
        }
         std::array<int,3> a;
        static_cast<void>(a);
         std::array<int,3> a2;
        static_cast<void>(a2);
        if (ceto::bounds_check(std::array<int,25>(), 5)) {
            ; // pass
        }
        if (ceto::bounds_check(std::array<int,26>(), 5)) {
            ; // pass
        }
        if (ceto::bounds_check(std::array<int,28>(), 5)) {
            ; // pass
        }
        if (1 + ceto::bounds_check(std::array<int,29>(), 5)) {
            ; // pass
        }
        const auto f = []() {
                return []() {
                        std::cout << "hi";
                        return;
                        };
                };
        const auto f2 = []() {
                return []() {
                        std::cout << "hi";
                        return;
                        };
                };
        f()();
        f2()();
        const auto fn = std::function([]() {
                return "yo";
                });
        const auto lf = std::vector {fn};
        std::cout << ceto::bounds_check(lf, 0)();
    }

