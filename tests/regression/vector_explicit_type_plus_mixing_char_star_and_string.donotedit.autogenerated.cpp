
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
struct Blah : public ceto::shared_object, public std::enable_shared_from_this<Blah> {

        inline auto foo() const -> void {
            printf("in foo method\n");
        }

};

    auto main() -> int {
        const auto a = ceto::make_shared_propagate_const<const Blah>();
        const auto b = ceto::make_shared_propagate_const<const Blah>();
        const auto l = std::vector<ceto::propagate_const<std::shared_ptr<const Blah>>>{a, b};
        (*ceto::mad(ceto::bounds_check(l, 1))).foo();
        const auto s = std::vector<std::string>{"a", "b", "c"};
        printf("%s is the last element. %c is the first.\n", [&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(ceto::bounds_check(s, 2))).c_str()))>  || (!std::is_reference_v<decltype("%s is the last element. %c is the first.\n")> && std::is_fundamental_v<std::remove_cvref_t<decltype("%s is the last element. %c is the first.\n")>> && !std::is_reference_v<decltype([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(ceto::bounds_check(ceto::bounds_check(s, 0), 0))>  || (!std::is_reference_v<decltype("%s is the last element. %c is the first.\n")> && std::is_fundamental_v<std::remove_cvref_t<decltype("%s is the last element. %c is the first.\n")>> && !std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(ceto::bounds_check(s, 2))).c_str()))> && std::is_fundamental_v<std::remove_cvref_t<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(ceto::bounds_check(s, 2))).c_str()))>>)) && true)); return ceto::bounds_check(ceto::bounds_check(s, 0), 0); }())> && std::is_fundamental_v<std::remove_cvref_t<decltype([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(ceto::bounds_check(ceto::bounds_check(s, 0), 0))>  || (!std::is_reference_v<decltype("%s is the last element. %c is the first.\n")> && std::is_fundamental_v<std::remove_cvref_t<decltype("%s is the last element. %c is the first.\n")>> && !std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(ceto::bounds_check(s, 2))).c_str()))> && std::is_fundamental_v<std::remove_cvref_t<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(ceto::bounds_check(s, 2))).c_str()))>>)) && true)); return ceto::bounds_check(ceto::bounds_check(s, 0), 0); }())>>)) && true)); return CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(ceto::bounds_check(s, 2))).c_str()); }(), [&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(ceto::bounds_check(ceto::bounds_check(s, 0), 0))>  || (!std::is_reference_v<decltype("%s is the last element. %c is the first.\n")> && std::is_fundamental_v<std::remove_cvref_t<decltype("%s is the last element. %c is the first.\n")>> && !std::is_reference_v<decltype([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(ceto::bounds_check(s, 2))).c_str()))>  || (!std::is_reference_v<decltype("%s is the last element. %c is the first.\n")> && std::is_fundamental_v<std::remove_cvref_t<decltype("%s is the last element. %c is the first.\n")>> && !std::is_reference_v<decltype(ceto::bounds_check(ceto::bounds_check(s, 0), 0))> && std::is_fundamental_v<std::remove_cvref_t<decltype(ceto::bounds_check(ceto::bounds_check(s, 0), 0))>>)) && true)); return CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(ceto::bounds_check(s, 2))).c_str()); }())> && std::is_fundamental_v<std::remove_cvref_t<decltype([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(ceto::bounds_check(s, 2))).c_str()))>  || (!std::is_reference_v<decltype("%s is the last element. %c is the first.\n")> && std::is_fundamental_v<std::remove_cvref_t<decltype("%s is the last element. %c is the first.\n")>> && !std::is_reference_v<decltype(ceto::bounds_check(ceto::bounds_check(s, 0), 0))> && std::is_fundamental_v<std::remove_cvref_t<decltype(ceto::bounds_check(ceto::bounds_check(s, 0), 0))>>)) && true)); return CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(ceto::bounds_check(s, 2))).c_str()); }())>>)) && true)); return ceto::bounds_check(ceto::bounds_check(s, 0), 0); }());
    }

