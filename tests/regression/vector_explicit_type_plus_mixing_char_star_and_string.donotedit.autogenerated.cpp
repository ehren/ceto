
#include "ceto.h"

;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
 // unsafe external C++: printf
;
struct Blah : public ceto::shared_object, public std::enable_shared_from_this<Blah> {

        inline auto foo() const -> void {
            printf("in foo method\n");
        }

};

    auto main() -> int {
        const auto a = ceto::make_shared_propagate_const<const Blah>();
        const auto b = ceto::make_shared_propagate_const<const Blah>();
        const std::vector<ceto::propagate_const<std::shared_ptr<const Blah>>> l = std::vector<ceto::propagate_const<std::shared_ptr<const Blah>>>{a, b}; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(std::vector<ceto::propagate_const<std::shared_ptr<const Blah>>>{a, b}), std::remove_cvref_t<decltype(l)>>);
        (*ceto::mad(ceto::bounds_check(l, 1))).foo();
        const std::vector<std::string> s = std::vector<std::string>{"a", "b", "c"}; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(std::vector<std::string>{"a", "b", "c"}), std::remove_cvref_t<decltype(s)>>);
        if (1) {
            // unsafe;
            printf("%s is the last element. %c is the first.\n", (*ceto::mad(ceto::bounds_check(s, 2))).c_str(), ceto::bounds_check(ceto::bounds_check(s, 0), 0));
        }
    }

