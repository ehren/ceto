
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
#include <ranges>
;
#include <iostream>
;
     template<typename ... Args> inline auto range( Args && ...  args) -> decltype(auto) {
        if constexpr (sizeof...(Args) == 1) {
            return std::ranges::iota_view(0, std::forward<Args>(args)...);
        } else {
            return std::ranges::iota_view(std::forward<Args>(args)...);
        }
    }

    auto main() -> int {
        
            auto&& ceto__private__intermediate1 = range(10);

            static_assert(requires { std::begin(ceto__private__intermediate1) + 2; }, "not a contiguous container");
            size_t ceto__private__size3 = std::size(ceto__private__intermediate1);
            for (size_t ceto__private__idx2 = 0; ; ceto__private__idx2++) {
                if (std::size(ceto__private__intermediate1) != ceto__private__size3) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx2 >= ceto__private__size3) {
                    break;
                }
                const auto i = ceto__private__intermediate1[ceto__private__idx2];
                            std::cout << i;

            }
            
            auto&& ceto__private__intermediate4 = range(0, 10);

            static_assert(requires { std::begin(ceto__private__intermediate4) + 2; }, "not a contiguous container");
            size_t ceto__private__size6 = std::size(ceto__private__intermediate4);
            for (size_t ceto__private__idx5 = 0; ; ceto__private__idx5++) {
                if (std::size(ceto__private__intermediate4) != ceto__private__size6) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx5 >= ceto__private__size6) {
                    break;
                }
                const auto i = ceto__private__intermediate4[ceto__private__idx5];
                            std::cout << i;

            }
            
            auto&& ceto__private__intermediate7 = (-10);
        auto&& ceto__private__intermediate8 = range(ceto__private__intermediate7, 10);

            static_assert(requires { std::begin(ceto__private__intermediate8) + 2; }, "not a contiguous container");
            size_t ceto__private__size10 = std::size(ceto__private__intermediate8);
            for (size_t ceto__private__idx9 = 0; ; ceto__private__idx9++) {
                if (std::size(ceto__private__intermediate8) != ceto__private__size10) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx9 >= ceto__private__size10) {
                    break;
                }
                const auto i = ceto__private__intermediate8[ceto__private__idx9];
                            std::cout << i;

            }
        }

