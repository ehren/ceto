
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
    auto main() -> int {
        auto v { std::vector<std::ranges::range_value_t<std::vector<decltype(0)>>>() } ;
        auto v2 { std::vector<std::ranges::range_value_t<std::vector<std::ranges::range_value_t<std::vector<decltype(0)>>>>>() } ;
        const auto range = std::vector {{0, 1, 2}};
        
    
            static_assert(requires { std::begin(range) + 2; }, "not a contiguous container");
            size_t ceto__private__size2 = std::size(range);
            for (size_t ceto__private__idx1 = 0; ; ceto__private__idx1++) {
                if (std::size(range) != ceto__private__size2) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx1 >= ceto__private__size2) {
                    break;
                }
                const auto x = range[ceto__private__idx1];
                            (v).push_back([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(x)> ) && true || ceto::IsContainer<std::remove_cvref_t<decltype(v)>>)); return x; }());

            }
            
            auto&& ceto__private__intermediate3 = std::vector {{0, 1, 2}};

            static_assert(requires { std::begin(ceto__private__intermediate3) + 2; }, "not a contiguous container");
            size_t ceto__private__size5 = std::size(ceto__private__intermediate3);
            for (size_t ceto__private__idx4 = 0; ; ceto__private__idx4++) {
                if (std::size(ceto__private__intermediate3) != ceto__private__size5) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx4 >= ceto__private__size5) {
                    break;
                }
                const auto x = ceto__private__intermediate3[ceto__private__idx4];
                            (v).push_back([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(x)> ) && true || ceto::IsContainer<std::remove_cvref_t<decltype(v)>>)); return x; }());

            }
            
    
            static_assert(requires { std::begin(v) + 2; }, "not a contiguous container");
            size_t ceto__private__size7 = std::size(v);
            for (size_t ceto__private__idx6 = 0; ; ceto__private__idx6++) {
                if (std::size(v) != ceto__private__size7) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx6 >= ceto__private__size7) {
                    break;
                }
                const auto x = v[ceto__private__idx6];
                            (v2).push_back([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(x)> ) && true || ceto::IsContainer<std::remove_cvref_t<decltype(v2)>>)); return x; }());
                    (v2).push_back([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(x)> ) && true || ceto::IsContainer<std::remove_cvref_t<decltype(v2)>>)); return x; }());

            }
            
    
            static_assert(requires { std::begin(v2) + 2; }, "not a contiguous container");
            size_t ceto__private__size9 = std::size(v2);
            for (size_t ceto__private__idx8 = 0; ; ceto__private__idx8++) {
                if (std::size(v2) != ceto__private__size9) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx8 >= ceto__private__size9) {
                    break;
                }
                const auto x = v2[ceto__private__idx8];
                            std::cout << x;

            }
        }

