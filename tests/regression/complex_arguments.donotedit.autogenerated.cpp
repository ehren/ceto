
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
    template <typename T1>
auto moretest2(const T1& p) -> void {
        (std::cout << p) << "\n";
        const auto l = std::vector {{1, 2, 3}};
        const std::vector<int> a = l; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(l), std::remove_cvref_t<decltype(a)>>);
        const auto b = std::vector {{1, 2, 3, 4}};
    }

    inline auto moretest( int const * const * const *  p) -> void {
        (std::cout << p) << "\n";
    }

    inline auto test( int const *  p) -> void {
        (std::cout << p) << "\n";
    }

    inline auto test( int * const  p) -> void {
        (std::cout << p) << "\n";
    }

    inline auto test2( int const * const  p) -> void {
        (std::cout << p) << "\n";
    }

    inline auto test( int * const *  p) -> void {
        (std::cout << p) << "\n";
    }

    inline auto test3( const int * const  p) -> void {
        (std::cout << p) << "\n";
    }

    inline auto bar( int const &  x) -> void {
        printf("int by const ref %d", x);
    }

    inline auto foo(const std::vector<std::string>&  items) -> void {
        ((std::cout << "size: ") << (*ceto::mad(items)).size()) << "\n";
        
    
            static_assert(requires { std::begin(items) + 2; }, "not a contiguous container");
            size_t ceto__private__size2 = std::size(items);
            for (size_t ceto__private__idx1 = 0; ; ceto__private__idx1++) {
                if (std::size(items) != ceto__private__size2) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx1 >= ceto__private__size2) {
                    break;
                }
                const auto s = items[ceto__private__idx1];
                            (std::cout << s) << "\n";

            }
        }

    auto main(const int  argc, const char * *  argv) -> int {
        printf("argc %d\n", argc);
        assert((*ceto::mad(std::string([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(CETO_UNSAFE_ARRAY_ACCESS(argv, 0))> ) && true)); return CETO_UNSAFE_ARRAY_ACCESS(argv, 0); }()))).length() > 0);
        const auto lst = std::vector {{std::string {"hello"}, std::string {"world"}}};
        foo(lst);
        bar((*ceto::mad(lst)).size());
    }

