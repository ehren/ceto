
#include "ceto.h"

;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
 // unsafe external C++: printf, assert, static_cast
;
    template <typename ceto__private__T11>
auto moretest2(const ceto__private__T11& p) -> void {
        std::cout << p << "\n";
        const auto l = std::vector {{1, 2, 3}};
        const std::vector<int> a = l; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(l), std::remove_cvref_t<decltype(a)>>);
        const auto b = std::vector {{1, 2, 3, 4}};
    }

    inline auto moretest( int const * const * const *  p) -> void {
        std::cout << p << "\n";
    }

    inline auto test( int const *  p) -> void {
        std::cout << p << "\n";
    }

    inline auto test( int * const  p) -> void {
        std::cout << p << "\n";
    }

    inline auto test2( int const * const  p) -> void {
        std::cout << p << "\n";
    }

    inline auto test( int * const *  p) -> void {
        std::cout << p << "\n";
    }

    inline auto test3( const int * const  p) -> void {
        std::cout << p << "\n";
    }

    inline auto bar( int const &  x) -> void {
        printf("int by const ref %d", x);
    }

    inline auto foo(const std::vector<std::string>&  items) -> void {
        std::cout << "size: " << (*ceto::mad(items)).size() << "\n";
        
    
            static_assert(requires { std::begin(items) + 2; }, "not a contiguous container");
            size_t ceto__private__size3 = std::size(items);
            for (size_t ceto__private__idx2 = 0; ; ceto__private__idx2++) {
                if (std::size(items) != ceto__private__size3) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx2 >= ceto__private__size3) {
                    break ;
                }
                const auto s = items[ceto__private__idx2];
                            std::cout << s << "\n";

            }
        }

    auto main(const int  argc, const char * *  argv) -> int {
        printf("argc %d\n", argc);
        assert((*ceto::mad(std::string([&]() -> decltype(auto) { static_assert((((!std::is_reference_v<decltype(CETO_UNSAFE_ARRAY_ACCESS(argv, 0))> ) && true)  || true )); return CETO_UNSAFE_ARRAY_ACCESS(argv, 0); }()))).length() > 0);
        const auto lst = std::vector {{std::string {"hello"}, std::string {"world"}}};
        foo(lst);
        bar(static_cast<int>([&]() -> decltype(auto) { static_assert((((!std::is_reference_v<decltype((*ceto::mad(lst)).size())> ) && true)  )); return (*ceto::mad(lst)).size(); }()));
    }

