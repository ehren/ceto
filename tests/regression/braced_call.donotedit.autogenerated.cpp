
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;

#include <array>
;
    auto main() -> int {
        const auto a = std::array<int,3>{1, 2, 3};
        const std::array<int,3> a3 = {1, 2, 3};
        const std::array<int,3> a4 = std::array<int,3>{1, 2, 3}; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(std::array<int,3>{1, 2, 3}), std::remove_cvref_t<decltype(a4)>>);
        const auto v = std::vector<int>{1, 2};
        const auto v2 = std::vector<int>(30, 5);
        const std::vector<int> v3 = {30, 5};
        
            auto&& ceto__private__intermediate3 = {a, a3, a4};

            static_assert(requires { std::begin(ceto__private__intermediate3) + 2; }, "not a contiguous container");
            size_t ceto__private__size5 = std::size(ceto__private__intermediate3);
            for (size_t ceto__private__idx4 = 0; ; ceto__private__idx4++) {
                if (std::size(ceto__private__intermediate3) != ceto__private__size5) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx4 >= ceto__private__size5) {
                    break;
                }
                const auto x = ceto__private__intermediate3[ceto__private__idx4];
                    
    
                        static_assert(requires { std::begin(x) + 2; }, "not a contiguous container");
                        size_t ceto__private__size2 = std::size(x);
                        for (size_t ceto__private__idx1 = 0; ; ceto__private__idx1++) {
                            if (std::size(x) != ceto__private__size2) {
                                std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                                std::terminate();
                            }
                            if (ceto__private__idx1 >= ceto__private__size2) {
                                break;
                            }
                            const auto i = x[ceto__private__idx1];
                                            std::cout << i;

                        }
    
            }
            
            auto&& ceto__private__intermediate8 = {v, v2, v3};

            static_assert(requires { std::begin(ceto__private__intermediate8) + 2; }, "not a contiguous container");
            size_t ceto__private__size10 = std::size(ceto__private__intermediate8);
            for (size_t ceto__private__idx9 = 0; ; ceto__private__idx9++) {
                if (std::size(ceto__private__intermediate8) != ceto__private__size10) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx9 >= ceto__private__size10) {
                    break;
                }
                const auto x = ceto__private__intermediate8[ceto__private__idx9];
                    
    
                        static_assert(requires { std::begin(x) + 2; }, "not a contiguous container");
                        size_t ceto__private__size7 = std::size(x);
                        for (size_t ceto__private__idx6 = 0; ; ceto__private__idx6++) {
                            if (std::size(x) != ceto__private__size7) {
                                std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                                std::terminate();
                            }
                            if (ceto__private__idx6 >= ceto__private__size7) {
                                break;
                            }
                            const auto i = x[ceto__private__idx6];
                                            std::cout << i;

                        }
    
            }
            
            auto&& ceto__private__intermediate13 = std::array{a, a3, a4};

            static_assert(requires { std::begin(ceto__private__intermediate13) + 2; }, "not a contiguous container");
            size_t ceto__private__size15 = std::size(ceto__private__intermediate13);
            for (size_t ceto__private__idx14 = 0; ; ceto__private__idx14++) {
                if (std::size(ceto__private__intermediate13) != ceto__private__size15) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx14 >= ceto__private__size15) {
                    break;
                }
                const auto x = ceto__private__intermediate13[ceto__private__idx14];
                    
    
                        static_assert(requires { std::begin(x) + 2; }, "not a contiguous container");
                        size_t ceto__private__size12 = std::size(x);
                        for (size_t ceto__private__idx11 = 0; ; ceto__private__idx11++) {
                            if (std::size(x) != ceto__private__size12) {
                                std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                                std::terminate();
                            }
                            if (ceto__private__idx11 >= ceto__private__size12) {
                                break;
                            }
                            const auto i = x[ceto__private__idx11];
                                            std::cout << i;

                        }
    
            }
            const auto get = [](const auto &t) -> void {
                (std::cout << ceto::bounds_check(std::get<0>(t), 0));
                };
        const auto t = std::tuple{a, a3, a4, v, v2, v3};
        const auto t2 = std::make_tuple(a, v);
        get(t);
        get(t2);
    }

