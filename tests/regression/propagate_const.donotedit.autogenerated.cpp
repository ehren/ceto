
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
template <typename ceto__private__C1>struct Foo : public ceto::enable_shared_from_this_base_for_templates {

    ceto__private__C1 x;

        inline auto foo() const -> void {
            std::cout << "i'm const\n";
        }

        inline auto foo() -> void {
            (this -> x) += (this -> x);
            std::cout << "i'm mut\n";
        }

    explicit Foo(ceto__private__C1 x) : x(std::move(x)) {}

    Foo() = delete;

};

    template <typename ceto__private__T12>
auto calls_foo(const ceto__private__T12& f) -> void {
        (*ceto::mad(f)).foo();
    }

    inline auto calls_foo_through_mut( auto  m) -> void {
        (*ceto::mad(m)).foo();
    }

    template <typename ceto__private__T13>
auto calls_foo_through_mut_copy(const ceto__private__T13& f) -> void {
        auto m { f } ;
        (*ceto::mad(m)).foo();
    }

    auto main() -> int {
        auto m { ceto::make_shared_propagate_const<decltype(Foo{1})>(1) } ;
        const auto c = ceto::make_shared_propagate_const<const decltype(Foo{std::string {"blah"}})>(std::string {"blah"});
        (*ceto::mad(c)).foo();
        (*ceto::mad(m)).foo();
        calls_foo(c);
        calls_foo(m);
        calls_foo_through_mut(c);
        calls_foo_through_mut_copy(c);
        calls_foo_through_mut(m);
        calls_foo_through_mut_copy(m);
    }

