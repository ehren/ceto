
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
    auto main() -> int {
        const std::u8string u = u8"1"; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(u8"1"), std::remove_cvref_t<decltype(u)>>);
        const auto s = std::string([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).begin()))>  || (!std::is_reference_v<decltype([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).end()))>  || (!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).begin()))> && std::is_fundamental_v<std::remove_cvref_t<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).begin()))>>)) && true)); return CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).end()); }())> && std::is_fundamental_v<std::remove_cvref_t<decltype([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).end()))>  || (!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).begin()))> && std::is_fundamental_v<std::remove_cvref_t<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).begin()))>>)) && true)); return CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).end()); }())>>)) && true)); return CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).begin()); }(), [&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).end()))>  || (!std::is_reference_v<decltype([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).begin()))>  || (!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).end()))> && std::is_fundamental_v<std::remove_cvref_t<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).end()))>>)) && true)); return CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).begin()); }())> && std::is_fundamental_v<std::remove_cvref_t<decltype([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).begin()))>  || (!std::is_reference_v<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).end()))> && std::is_fundamental_v<std::remove_cvref_t<decltype(CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).end()))>>)) && true)); return CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).begin()); }())>>)) && true)); return CETO_BAN_RAW_DEREFERENCABLE((*ceto::mad(u)).end()); }());
        std::cout << s;
    }

