
#include "ceto.h"

;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
struct Foo : public ceto::shared_object, public std::enable_shared_from_this<Foo> {

};

    auto main() -> int {
        const auto f = ceto::make_shared_propagate_const<const Foo>();
        static_assert(std::is_same_v<decltype(f),const ceto::propagate_const<std::shared_ptr<const Foo>>>);
        ceto::propagate_const<std::shared_ptr<Foo>> f1 = ceto::make_shared_propagate_const<Foo>(); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(ceto::make_shared_propagate_const<Foo>()), std::remove_cvref_t<decltype(f1)>>);
        static_assert(std::is_same_v<decltype(f1),ceto::propagate_const<std::shared_ptr<Foo>>>);
        auto f2 { ceto::make_shared_propagate_const<Foo>() } ;
        static_assert(std::is_same_v<decltype(f2),ceto::propagate_const<std::shared_ptr<Foo>>>);
        auto f3 { ceto::make_shared_propagate_const<const Foo>() } ;
        static_assert(std::is_same_v<decltype(f3),ceto::propagate_const<std::shared_ptr<const Foo>>>);
        const auto f4 = ceto::make_shared_propagate_const<Foo>();
        static_assert(std::is_same_v<decltype(f4),const ceto::propagate_const<std::shared_ptr<Foo>>>);
        const auto f5 = ceto::make_shared_propagate_const<const Foo>(); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(ceto::make_shared_propagate_const<const Foo>()), std::remove_cvref_t<decltype(f5)>>);
        static_assert(std::is_same_v<decltype(f5),const ceto::propagate_const<std::shared_ptr<const Foo>>>);
        const auto f6 = ceto::make_shared_propagate_const<const Foo>(); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(ceto::make_shared_propagate_const<const Foo>()), std::remove_cvref_t<decltype(f6)>>);
        static_assert(std::is_same_v<decltype(f6),const ceto::propagate_const<std::shared_ptr<const Foo>>>);
        const auto f7 = ceto::make_shared_propagate_const<Foo>(); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(ceto::make_shared_propagate_const<Foo>()), std::remove_cvref_t<decltype(f7)>>);
        static_assert(std::is_same_v<decltype(f7),const ceto::propagate_const<std::shared_ptr<Foo>>>);
        const ceto::propagate_const<std::shared_ptr<const Foo>> f8 = ceto::make_shared_propagate_const<Foo>(); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(ceto::make_shared_propagate_const<Foo>()), std::remove_cvref_t<decltype(f8)>>);
        static_assert(std::is_same_v<decltype(f8),const ceto::propagate_const<std::shared_ptr<const Foo>>>);
        const ceto::propagate_const<std::shared_ptr<const Foo>> f9 = ceto::make_shared_propagate_const<const Foo>(); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(ceto::make_shared_propagate_const<const Foo>()), std::remove_cvref_t<decltype(f9)>>);
        static_assert(std::is_same_v<decltype(f9),const ceto::propagate_const<std::shared_ptr<const Foo>>>);
        const ceto::propagate_const<std::shared_ptr<const Foo>> f10 = ceto::make_shared_propagate_const<const Foo>(); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(ceto::make_shared_propagate_const<const Foo>()), std::remove_cvref_t<decltype(f10)>>);
        static_assert(std::is_same_v<decltype(f10),const ceto::propagate_const<std::shared_ptr<const Foo>>>);
        const std::weak_ptr<const Foo> f11 = ceto::get_underlying(f); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(ceto::get_underlying(f)), std::remove_cvref_t<decltype(f11)>>);
        static_assert(std::is_same_v<decltype(f11),const std::weak_ptr<const Foo>>);
        std::weak_ptr<Foo> f12 = ceto::get_underlying(f1); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(ceto::get_underlying(f1)), std::remove_cvref_t<decltype(f12)>>);
        static_assert(std::is_same_v<decltype(f12),std::weak_ptr<Foo>>);
        std::weak_ptr<Foo> f13 = ceto::get_underlying(f1); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(ceto::get_underlying(f1)), std::remove_cvref_t<decltype(f13)>>);
        static_assert(std::is_same_v<decltype(f13),std::weak_ptr<Foo>>);
        const std::weak_ptr<const Foo> f14 = ceto::get_underlying(f1); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(ceto::get_underlying(f1)), std::remove_cvref_t<decltype(f14)>>);
        static_assert(std::is_same_v<decltype(f14),const std::weak_ptr<const Foo>>);
    }

