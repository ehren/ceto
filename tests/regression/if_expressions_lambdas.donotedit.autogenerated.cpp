
#include "ceto.h"

;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
    auto main() -> int {
        const auto x = [&]() {if (1) {
            return std::vector {{1, 2}};
        } else {
            return std::vector {{2, 1}};
        }}()
;
        std::cout << ceto::bounds_check(x, 0) << ceto::bounds_check(x, 1);
        const auto result = [](const auto &x) {
                return [&]() {if (ceto::bounds_check(x, 1) == 2) {
                    return ceto::bounds_check(x, 1);
                } else {
                    return ceto::bounds_check(x, 0);
                }}()
;
                }(x);
        std::cout << [&]() {if (result) {
            return result;
        } else {
            return 0;
        }}()
;
        std::cout << [&]() {if (const auto r = [](const auto &x) {
                return [&]() {if (ceto::bounds_check(x, 1) == 2) {
                    return ceto::bounds_check(x, 1);
                } else {
                    return ceto::bounds_check(x, 0);
                }}()
;
                }(x)) {
            return r;
        } else {
            return 0;
        }}()
;
        std::cout << [&]() {if (const auto r = [](const auto &x) {
                return [&]() {if (ceto::bounds_check(x, 1) == 2) {
                    return ceto::bounds_check(x, 1);
                } else {
                    return ceto::bounds_check(x, 0);
                }}()
;
                }(x)) {
            return r;
        } else {
            return 0;
        }}()
;
        std::cout << [&]() {if (const auto r = [&]() {if (ceto::bounds_check(x, 1) == 2) {
            return ceto::bounds_check(x, 1);
        } else {
            return ceto::bounds_check(x, 0);
        }}()
) {
            return r;
        } else {
            return 0;
        }}()
;
        std::cout << [&]() {if (const auto r = [&]() {if (ceto::bounds_check(x, 1) == 2) {
            return ceto::bounds_check(x, 1);
        } else {
            return ceto::bounds_check(x, 0);
        }}()
) {
            return r;
        } else {
            return 0;
        }}()
;
        std::cout << [&]() {if ([&]() {if (ceto::bounds_check(x, 1) == 2) {
            return ceto::bounds_check(x, 1);
        } else {
            return ceto::bounds_check(x, 0);
        }}()
) {
            return ceto::bounds_check(x, 1);
        } else {
            return 0;
        }}()
;
        std::cout << [&]() {if ([&]() {if (ceto::bounds_check(x, 1) == 2) {
            return ceto::bounds_check(x, 1);
        } else {
            return ceto::bounds_check(x, 0);
        }}()
) {
            return ceto::bounds_check(x, 1);
        } else {
            return 0;
        }}()
;
    }

