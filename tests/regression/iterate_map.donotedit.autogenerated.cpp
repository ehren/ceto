
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
#include <map>
;
template <typename ceto__private__C1>struct Foo : public ceto::enable_shared_from_this_base_for_templates {

    ceto__private__C1 x;

    explicit Foo(ceto__private__C1 x) : x(std::move(x)) {}

    Foo() = delete;

};

    auto main() -> int {
        const std::unordered_map<decltype(1),decltype(std::vector {{ceto::make_shared_propagate_const<const decltype(Foo{1})>(1), ceto::make_shared_propagate_const<const decltype(Foo{2})>(2)}})> map = []() {
                static_assert(true && std::is_same_v<std::unordered_map<decltype(2),decltype(std::vector {ceto::make_shared_propagate_const<const decltype(Foo{3})>(3)})>,std::unordered_map<decltype(1),decltype(std::vector {{ceto::make_shared_propagate_const<const decltype(Foo{1})>(1), ceto::make_shared_propagate_const<const decltype(Foo{2})>(2)}})>>, "all key-value pairs must be of the same type in map literal");
                return std::unordered_map<decltype(1),decltype(std::vector {{ceto::make_shared_propagate_const<const decltype(Foo{1})>(1), ceto::make_shared_propagate_const<const decltype(Foo{2})>(2)}})>{{1, std::vector {{ceto::make_shared_propagate_const<const decltype(Foo{1})>(1), ceto::make_shared_propagate_const<const decltype(Foo{2})>(2)}}}, {2, std::vector {ceto::make_shared_propagate_const<const decltype(Foo{3})>(3)}}};
                }(); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype([]() {
                static_assert(true && std::is_same_v<std::unordered_map<decltype(2),decltype(std::vector {ceto::make_shared_propagate_const<const decltype(Foo{3})>(3)})>,std::unordered_map<decltype(1),decltype(std::vector {{ceto::make_shared_propagate_const<const decltype(Foo{1})>(1), ceto::make_shared_propagate_const<const decltype(Foo{2})>(2)}})>>, "all key-value pairs must be of the same type in map literal");
                return std::unordered_map<decltype(1),decltype(std::vector {{ceto::make_shared_propagate_const<const decltype(Foo{1})>(1), ceto::make_shared_propagate_const<const decltype(Foo{2})>(2)}})>{{1, std::vector {{ceto::make_shared_propagate_const<const decltype(Foo{1})>(1), ceto::make_shared_propagate_const<const decltype(Foo{2})>(2)}}}, {2, std::vector {ceto::make_shared_propagate_const<const decltype(Foo{3})>(3)}}};
                }()), std::remove_cvref_t<decltype(map)>>);
        ceto::safe_for_loop<!std::is_reference_v<decltype(map)> && ceto::OwningContainer<std::remove_cvref_t<decltype(map)>>>(map, [&](auto &&ceto__private__lambda_param2) -> ceto::LoopControl {
      const auto [key, vec] = ceto__private__lambda_param2;
            std::cout << key << std::endl;
    return ceto::LoopControl::Continue;
});        const auto map2 = std::optional<std::map<int,int>>{};
        if (map2) {
            std::cout << (*ceto::mad(map2)).at(42);
        }
    }

