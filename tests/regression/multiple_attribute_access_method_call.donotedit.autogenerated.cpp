
#include "ceto.h"

;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
struct Foo : public ceto::shared_object, public std::enable_shared_from_this<Foo> {

    ceto::propagate_const<std::shared_ptr<const Foo>> f;

        inline auto use_count() const -> auto {
            const auto self = ceto::shared_from(this);
            return (&self) -> use_count();
        }

    explicit Foo(ceto::propagate_const<std::shared_ptr<const Foo>> f) : f(std::move(f)) {}

    Foo() = delete;

};

struct FooList : public ceto::shared_object, public std::enable_shared_from_this<FooList> {

    std::vector<ceto::propagate_const<std::shared_ptr<const Foo>>> l = std::vector<ceto::propagate_const<std::shared_ptr<const Foo>>>{}; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(std::vector<ceto::propagate_const<std::shared_ptr<const Foo>>>{}), std::remove_cvref_t<decltype(l)>>);

};

    auto main() -> int {
        const auto f = ceto::make_shared_propagate_const<const Foo>(ceto::make_shared_propagate_const<const Foo>(ceto::make_shared_propagate_const<const Foo>(ceto::make_shared_propagate_const<const Foo>(ceto::make_shared_propagate_const<const Foo>(nullptr)))));
        std::cout << (*ceto::mad((*ceto::mad((*ceto::mad((*ceto::mad((*ceto::mad(f)).f)).f)).f)).f)).use_count();
        (*ceto::mad((*ceto::mad(ceto::make_shared_propagate_const<FooList>())).l)).push_back(f);
        (*ceto::mad(ceto::make_shared_propagate_const<const FooList>())).l;
        std::cout << (*ceto::mad((*ceto::mad(ceto::make_shared_propagate_const<const Foo>(ceto::make_shared_propagate_const<const Foo>(nullptr)))).f)).use_count();
        std::cout << (*ceto::mad((*ceto::mad(ceto::make_shared_propagate_const<const Foo>(ceto::make_shared_propagate_const<const Foo>(nullptr)))).f)).use_count();
        (*ceto::mad((*ceto::mad(ceto::make_shared_propagate_const<const FooList>())).l)).operator[](0);
        auto fl { ceto::make_shared_propagate_const<FooList>() } ;
        (*ceto::mad((*ceto::mad(fl)).l)).push_back(f);
        std::cout << (*ceto::mad((*ceto::mad((*ceto::mad(fl)).l)).operator[](0))).use_count();
    }

