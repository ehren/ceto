
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
namespace blah {
        template <typename T1>
auto append(const T1& x) -> void {
        static_cast<void>(x);
    }


};
    template <typename T1, typename T2>
auto calls_generic_append(const T1& vec, const T2& element) -> auto {
        auto vec_copy { vec } ;
        ceto::append_or_push_back(vec_copy, element);
        return vec_copy;
    }

    auto main() -> int {
        blah::append(1);
        std::cout << ceto::bounds_check(calls_generic_append(std::vector {{1, 2, 3, 4}}, 5), 4);
        std::cout << calls_generic_append(std::string {"aaa"}, "bbb");
    }

