
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
    inline auto foo(const decltype(std::function([](const int  x) {
            return 0;
            })) f = [](const int  x) {
            return 0;
            }) -> auto {
        return f(3);
    }

    inline auto foo2(const decltype(std::function([](const int  x) -> int {
            return 0;
            })) f = [](const int  x) -> int {
            return 0;
            }) -> auto {
        return f(3);
    }

    inline auto foo3(const std::add_const_t<decltype(std::function([](const int  x) -> int {
            return 0;
            }))> f = [](const int  x) -> int {
            return 0;
            }) -> auto {
        static_assert(std::is_const_v<decltype(f)>);
        return f(3);
    }

    auto main() -> int {
        const auto l = [](const int  x) {
                std::cout << ("hi" + std::to_string(x));
                return 5;
                };
        const std::function f = l; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(l), std::remove_cvref_t<decltype(f)>>);
        const auto v = std::vector {f};
        (std::cout << ceto::bounds_check(v, 0)(5)) << "\n";
        (std::cout << foo()) << "\n";
        (std::cout << foo(l)) << "\n";
        (std::cout << foo2()) << "\n";
        (std::cout << foo2(l)) << "\n";
        (std::cout << foo3()) << "\n";
        std::cout << foo3(l);
    }

