
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
    template <typename T1>
auto foo(const T1& bar) -> auto {
        return bar;
    }

    inline auto blah(const int  x) -> auto {
        return x;
    }

    auto main() -> int {
        const auto l = std::vector {{1, 2, 3}};
        printf("%d\n", [&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(ceto::bounds_check(l, 0))>  || (!std::is_reference_v<decltype("%d\n")> && std::is_fundamental_v<std::remove_cvref_t<decltype("%d\n")>>)) && true)); return ceto::bounds_check(l, 0); }());
        const auto f = []() {
                return 0;
                };
        foo(f)();
        foo(printf);
        blah(1);
        printf;
    }

