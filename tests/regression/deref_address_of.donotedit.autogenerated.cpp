
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
struct Blah : public ceto::shared_object, public std::enable_shared_from_this<Blah> {

        inline auto huh() const -> void {
            (std::cout << "huh") << "\n";
        }

};

    auto main() -> int {
        (*ceto::mad(ceto::make_shared_propagate_const<const Blah>())).huh();
        const auto b = ceto::make_shared_propagate_const<const Blah>();
        (*ceto::mad(b)).huh();
        b -> huh();
        printf("addr %p\n", [&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(static_cast<const void *>([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype((&b) -> get())> ) && true)); return (&b) -> get(); }()))>  || (!std::is_reference_v<decltype("addr %p\n")> && std::is_fundamental_v<std::remove_cvref_t<decltype("addr %p\n")>>)) && true)); return static_cast<const void *>([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype((&b) -> get())> ) && true)); return (&b) -> get(); }()); }());
        printf("use_count %ld\n", [&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype((&b) -> use_count())>  || (!std::is_reference_v<decltype("use_count %ld\n")> && std::is_fundamental_v<std::remove_cvref_t<decltype("use_count %ld\n")>>)) && true)); return (&b) -> use_count(); }());
        const auto b_addr = (&b);
        printf("addr of shared_ptr instance %p\n", [&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(static_cast<const void *>(b_addr))>  || (!std::is_reference_v<decltype("addr of shared_ptr instance %p\n")> && std::is_fundamental_v<std::remove_cvref_t<decltype("addr of shared_ptr instance %p\n")>>)) && true)); return static_cast<const void *>(b_addr); }());
        printf("addr %p\n", [&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(static_cast<const void *>([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(b_addr -> get())> ) && true)); return b_addr -> get(); }()))>  || (!std::is_reference_v<decltype("addr %p\n")> && std::is_fundamental_v<std::remove_cvref_t<decltype("addr %p\n")>>)) && true)); return static_cast<const void *>([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(b_addr -> get())> ) && true)); return b_addr -> get(); }()); }());
        printf("use_count %ld\n", [&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(b_addr -> use_count())>  || (!std::is_reference_v<decltype("use_count %ld\n")> && std::is_fundamental_v<std::remove_cvref_t<decltype("use_count %ld\n")>>)) && true)); return b_addr -> use_count(); }());
        (*ceto::mad((*b_addr))).huh();
        (*b_addr) -> huh();
    }

