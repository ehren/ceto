
#include "ceto.h"

;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
struct Foo : public ceto::shared_object, public std::enable_shared_from_this<Foo> {

    int a;

        inline auto mutmethod() -> auto {
            (this -> a) = ((this -> a) + 1);
            return this -> a;
        }

        inline auto constmethod() const -> auto {
            return "i'm const by default";
        }

    explicit Foo(int a) : a(a) {}

    Foo() = delete;

};

struct HolderMut : public ceto::shared_object, public std::enable_shared_from_this<HolderMut> {

    ceto::propagate_const<std::shared_ptr<Foo>> f;

    explicit HolderMut(ceto::propagate_const<std::shared_ptr<Foo>> f) : f(f) {}

    HolderMut() = delete;

};

struct HolderConst : public ceto::shared_object, public std::enable_shared_from_this<HolderConst> {

    ceto::propagate_const<std::shared_ptr<const Foo>> f;

    explicit HolderConst(ceto::propagate_const<std::shared_ptr<const Foo>> f) : f(std::move(f)) {}

    HolderConst() = delete;

};

    auto main() -> int {
        const auto f = ceto::make_shared_propagate_const<const Foo>(1);
        const auto h = ceto::make_shared_propagate_const<const HolderConst>(f);
        std::cout << (*ceto::mad((*ceto::mad(h)).f)).constmethod();
        auto fm { ceto::make_shared_propagate_const<Foo>(2) } ;
        auto hm { ceto::make_shared_propagate_const<HolderMut>(fm) } ;
        std::cout << (*ceto::mad((*ceto::mad(hm)).f)).constmethod();
        std::cout << (*ceto::mad((*ceto::mad(hm)).f)).mutmethod();
        const auto hc = ceto::make_shared_propagate_const<const HolderConst>(fm);
        std::cout << (*ceto::mad((*ceto::mad(hc)).f)).constmethod();
    }

