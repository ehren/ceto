
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
struct Foo : public ceto::shared_object, public std::enable_shared_from_this<Foo> {

    int x;

    int y;

    explicit Foo(const decltype(5) x = 5, const decltype(4) y = 4) : x(x), y(y) {
    }

};

    auto main() -> int {
        const auto f1 = ceto::make_shared_propagate_const<const Foo>();
        const auto f2 = ceto::make_shared_propagate_const<const Foo>(1);
        const auto f3 = ceto::make_shared_propagate_const<const Foo>(2, 3);
        ceto::safe_for_loop<!std::is_reference_v<decltype({f1, f2, f3})> && ceto::OwningContainer<std::remove_cvref_t<decltype({f1, f2, f3})>>>({f1, f2, f3}, [&](auto &&ceto__private__lambda_param1) -> ceto::LoopControl {
    const auto f = ceto__private__lambda_param1;
            std::cout << (*ceto::mad(f)).x << (*ceto::mad(f)).y;
    return ceto::LoopControl::Continue;
});    }

