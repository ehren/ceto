
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
struct Foo : public ceto::shared_object, public std::enable_shared_from_this<Foo> {

    int x;

    int y;

    explicit Foo(const decltype(5) x = 5, const decltype(4) y = 4) : x(x), y(y) {
    }

};

    auto main() -> int {
        const auto f1 = ceto::make_shared_propagate_const<const Foo>();
        const auto f2 = ceto::make_shared_propagate_const<const Foo>(1);
        const auto f3 = ceto::make_shared_propagate_const<const Foo>(2, 3);
        
            auto&& ceto__private__intermediate1 = {f1, f2, f3};

            static_assert(requires { std::begin(ceto__private__intermediate1) + 2; }, "not a contiguous container");
            size_t ceto__private__size3 = std::size(ceto__private__intermediate1);
            for (size_t ceto__private__idx2 = 0; ; ceto__private__idx2++) {
                if (std::size(ceto__private__intermediate1) != ceto__private__size3) {
                    std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                    std::terminate();
                }
                if (ceto__private__idx2 >= ceto__private__size3) {
                    break;
                }
                const auto f = ceto__private__intermediate1[ceto__private__idx2];
                            (std::cout << (*ceto::mad(f)).x) << (*ceto::mad(f)).y;

            }
        }

