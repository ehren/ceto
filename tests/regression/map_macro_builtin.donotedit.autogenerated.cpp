
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
#include <map>
;
    auto main() -> int {
        const std::unordered_map<decltype(std::string {"one"}),decltype(1)> m = [&]() {
                static_assert(true && std::is_same_v<std::unordered_map<decltype(std::string {"two"}),decltype(2)>,std::unordered_map<decltype(std::string {"one"}),decltype(1)>>, "all key-value pairs must be of the same type in map literal");
                return std::unordered_map<decltype(std::string {"one"}),decltype(1)>{{std::string {"one"}, 1}, {std::string {"two"}, 2}};
                }(); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype([&]() {
                static_assert(true && std::is_same_v<std::unordered_map<decltype(std::string {"two"}),decltype(2)>,std::unordered_map<decltype(std::string {"one"}),decltype(1)>>, "all key-value pairs must be of the same type in map literal");
                return std::unordered_map<decltype(std::string {"one"}),decltype(1)>{{std::string {"one"}, 1}, {std::string {"two"}, 2}};
                }()), std::remove_cvref_t<decltype(m)>>);
        std::cout << (*ceto::mad(m)).at(std::string {"two"});
        std::map<decltype(1),decltype(2)> mm = [&]() {
                static_assert(true && std::is_same_v<std::map<decltype(2),decltype(3)>,std::map<decltype(1),decltype(2)>>, "all key-value pairs must be of the same type in map literal");
                return std::map<decltype(1),decltype(2)>{{1, 2}, {2, 3}};
                }(); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype([&]() {
                static_assert(true && std::is_same_v<std::map<decltype(2),decltype(3)>,std::map<decltype(1),decltype(2)>>, "all key-value pairs must be of the same type in map literal");
                return std::map<decltype(1),decltype(2)>{{1, 2}, {2, 3}};
                }()), std::remove_cvref_t<decltype(mm)>>);
        std::cout << ceto::bounds_check(mm, 1);
        std::map<decltype(1),decltype(2)> mm2 = [&]() {
                static_assert(true && std::is_same_v<std::map<decltype(2),decltype(3)>,std::map<decltype(1),decltype(2)>>, "all key-value pairs must be of the same type in map literal");
                return std::map<decltype(1),decltype(2)>{{1, 2}, {2, 3}};
                }(); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype([&]() {
                static_assert(true && std::is_same_v<std::map<decltype(2),decltype(3)>,std::map<decltype(1),decltype(2)>>, "all key-value pairs must be of the same type in map literal");
                return std::map<decltype(1),decltype(2)>{{1, 2}, {2, 3}};
                }()), std::remove_cvref_t<decltype(mm2)>>);
        std::cout << ceto::bounds_check(mm2, 2);
    }

