
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
    auto main() -> int {
        auto x { std::vector<decltype(1)>() } ;
        const auto lfunc = [](const auto &x, const auto &y) {
                return (x + y);
                };
        (x).push_back(1);
        std::cout << lfunc([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(ceto::bounds_check(x, 0))>  || (!std::is_reference_v<decltype([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(ceto::bounds_check(x, 0))>  || (!std::is_reference_v<decltype(ceto::bounds_check(x, 0))> && std::is_fundamental_v<std::remove_cvref_t<decltype(ceto::bounds_check(x, 0))>>)) && ceto::IsStateless<std::remove_cvref_t<decltype(lfunc)>>)); return ceto::bounds_check(x, 0); }())> && std::is_fundamental_v<std::remove_cvref_t<decltype([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(ceto::bounds_check(x, 0))>  || (!std::is_reference_v<decltype(ceto::bounds_check(x, 0))> && std::is_fundamental_v<std::remove_cvref_t<decltype(ceto::bounds_check(x, 0))>>)) && ceto::IsStateless<std::remove_cvref_t<decltype(lfunc)>>)); return ceto::bounds_check(x, 0); }())>>)) && ceto::IsStateless<std::remove_cvref_t<decltype(lfunc)>>)); return ceto::bounds_check(x, 0); }(), [&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(ceto::bounds_check(x, 0))>  || (!std::is_reference_v<decltype([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(ceto::bounds_check(x, 0))>  || (!std::is_reference_v<decltype(ceto::bounds_check(x, 0))> && std::is_fundamental_v<std::remove_cvref_t<decltype(ceto::bounds_check(x, 0))>>)) && ceto::IsStateless<std::remove_cvref_t<decltype(lfunc)>>)); return ceto::bounds_check(x, 0); }())> && std::is_fundamental_v<std::remove_cvref_t<decltype([&]() -> decltype(auto) { static_assert(((!std::is_reference_v<decltype(ceto::bounds_check(x, 0))>  || (!std::is_reference_v<decltype(ceto::bounds_check(x, 0))> && std::is_fundamental_v<std::remove_cvref_t<decltype(ceto::bounds_check(x, 0))>>)) && ceto::IsStateless<std::remove_cvref_t<decltype(lfunc)>>)); return ceto::bounds_check(x, 0); }())>>)) && ceto::IsStateless<std::remove_cvref_t<decltype(lfunc)>>)); return ceto::bounds_check(x, 0); }());
    }

