
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
struct Foo : public ceto::shared_object, public std::enable_shared_from_this<Foo> {

        template <typename ceto__private__T11>
auto foo(const ceto__private__T11& x) const -> void {
            const auto self = ceto::shared_from(this);
            std::cout << "hi" << x << (&self) -> use_count();
        }

        ~Foo() {
            std::cout << "dead";
        }

};

    auto main() -> int {
        struct Inner : public ceto::shared_object, public std::enable_shared_from_this<Inner> {

                    ceto::propagate_const<std::shared_ptr<const Foo>> f;

                inline auto foo(const int  x) const -> void {
                    std::cout << "hi";
                    (*ceto::mad(this -> f)).foo(x);
                }

            explicit Inner(ceto::propagate_const<std::shared_ptr<const Foo>> f) : f(std::move(f)) {}

            Inner() = delete;

        };

        const auto x = 1;
        const auto f = ceto::make_shared_propagate_const<const Foo>();
        const auto l = [x = ceto::default_capture(x), f = ceto::default_capture(f)]() {
                return (*ceto::mad(f)).foo(x);
                };
        l();
        const auto i = ceto::make_shared_propagate_const<const Inner>(f);
        [&]() {
                return (*ceto::mad(i)).foo(x);
                }();
    }

