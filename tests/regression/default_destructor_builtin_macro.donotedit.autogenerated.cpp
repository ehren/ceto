
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"


;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
struct Foo1 : public ceto::object {

};

struct Foo2 : public ceto::object {

         virtual ~Foo2() = default;

};

struct Foo3 : public ceto::object {

         virtual ~Foo3() = default;

};

    auto main() -> int {
        static_assert(!std::has_virtual_destructor_v<Foo1>);
        static_assert(std::has_virtual_destructor_v<Foo2>);
        static_assert(std::has_virtual_destructor_v<Foo3>);
    }

