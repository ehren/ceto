
#include "ceto.h"

;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
    template <typename ceto__private__T11>
auto use_count(const ceto__private__T11& selph) -> auto {
         // unsafe external C++: ceto.get_underlying
;
        return (&ceto::get_underlying(selph)) -> use_count();
    }

template <typename ceto__private__C2>struct Foo : public ceto::enable_shared_from_this_base_for_templates {

    ceto__private__C2 a;

        inline auto f() const -> void {
            const auto self = ceto::shared_from(this);
            std::cout << (this -> a) << "\n";
            std::cout << "in f:" << use_count(self) << "\n";
        }

        inline auto f2() const -> void {
            const auto self = ceto::shared_from(this);
            std::cout << (this -> a) << "\n";
            std::cout << "in f2:" << use_count(self) << "\n";
            const auto outer = [self = ceto::default_capture(self)]() {
                    std::cout << "in lambda1:" << use_count(self) << "\n";
                    const auto l = [self = ceto::default_capture(self)]() {
                            std::cout << (*ceto::mad(self)).a << "\n";
                            return;
                            };
                    l();
                    std::cout << "in lambda2:" << use_count(self) << "\n";
                    return;
                    };
            outer();
            std::cout << "in f2:" << use_count(self) << "\n";
        }

        ~Foo() {
            std::cout << "dead\n";
        }

    explicit Foo(ceto__private__C2 a) : a(std::move(a)) {}

    Foo() = delete;

};

    auto main() -> int {
        (*ceto::mad(ceto::make_shared_propagate_const<const decltype(Foo{"yo"})>("yo"))).f();
        (*ceto::mad(ceto::make_shared_propagate_const<const decltype(Foo{"yo"})>("yo"))).f2();
    }

