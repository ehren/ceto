
#include "ceto.h"

;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
#include <map>
;
#include <string>
;
template <typename ceto__private__C1>struct Generic : public ceto::enable_shared_from_this_base_for_templates {

    ceto__private__C1 x;

    explicit Generic(ceto__private__C1 x) : x(std::move(x)) {}

    Generic() = delete;

};

struct Concrete : public std::type_identity_t<decltype(Generic(std::declval<const int>()))> {

    explicit Concrete(const int  x) : std::type_identity_t<decltype(Generic(std::declval<const int>()))> (x) {
    }

    Concrete() = delete;

};

template <typename ceto__private__C2, typename ceto__private__C3>struct Generic2 : public std::type_identity_t<decltype(Generic(std::declval<ceto__private__C3>()))> {

    ceto__private__C2 y;

    explicit Generic2(ceto__private__C3 x, ceto__private__C2 y) : std::type_identity_t<decltype(Generic(std::declval<ceto__private__C3>()))> (x), y(y) {
    }

    Generic2() = delete;

};

struct Concrete2 : public Concrete {

using Concrete::Concrete;

};

    auto main() -> int {
        const auto f = ceto::make_shared_propagate_const<const decltype(Generic{"5"})>("5");
        const auto f2 = ceto::make_shared_propagate_const<const decltype(Concrete{5})>(5);
        const auto f3 = ceto::make_shared_propagate_const<const decltype(Generic2{std::vector {{5, 6}}, std::map<int,std::string>{{2, "two"}}})>(std::vector {{5, 6}}, std::map<int,std::string>{{2, "two"}});
        const auto f4 = ceto::make_shared_propagate_const<const decltype(Concrete2{42})>(42);
        std::cout << (*ceto::mad(f)).x << (*ceto::mad(f2)).x << ceto::bounds_check((*ceto::mad(f3)).x, 1) << (*ceto::mad((*ceto::mad(f3)).y)).at(2) << (*ceto::mad(f4)).x;
    }

