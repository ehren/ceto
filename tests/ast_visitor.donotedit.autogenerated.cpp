
#include "ceto.h"

;

;

;

;

;

;

;

;

;

;

;

;

;

;
#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
struct Node;

struct Identifier;

struct ListLiteral;

struct BaseVisitor : public ceto::shared_object, public std::enable_shared_from_this<BaseVisitor> {

         virtual auto visit(const ceto::propagate_const<std::shared_ptr<const Node>>&  node) -> void = 0;

         virtual auto visit(const ceto::propagate_const<std::shared_ptr<const Identifier>>&  ident) -> void = 0;

         virtual auto visit(const ceto::propagate_const<std::shared_ptr<const ListLiteral>>&  list_literal) -> void = 0;

};

struct Node : public ceto::shared_object, public std::enable_shared_from_this<Node> {

         virtual inline auto accept( ceto::propagate_const<std::shared_ptr<BaseVisitor>>  visitor) const -> void {
            const auto self = ceto::shared_from(this);
            (*ceto::mad(visitor)).visit(self);
        }

};

struct Identifier : public Node {

    std::string name;

         virtual inline auto accept( ceto::propagate_const<std::shared_ptr<BaseVisitor>>  visitor) const -> void {
            const auto self = ceto::shared_from(this);
            (*ceto::mad(visitor)).visit(self);
        }

    explicit Identifier(std::string name) : name(std::move(name)) {}

    Identifier() = delete;

};

struct ListLiteral : public Node {

    std::vector<ceto::propagate_const<std::shared_ptr<const Node>>> args;

         virtual inline auto accept( ceto::propagate_const<std::shared_ptr<BaseVisitor>>  visitor) const -> void {
            const auto self = ceto::shared_from(this);
            (*ceto::mad(visitor)).visit(self);
        }

    explicit ListLiteral(std::vector<ceto::propagate_const<std::shared_ptr<const Node>>> args) : args(std::move(args)) {}

    ListLiteral() = delete;

};

struct SimpleVisitor : public BaseVisitor {

using BaseVisitor::BaseVisitor;

         virtual inline auto visit(const ceto::propagate_const<std::shared_ptr<const Node>>&  node) -> void {
            std::cout << "SimpleVisitor visiting Node\n";
        }

         virtual inline auto visit(const ceto::propagate_const<std::shared_ptr<const Identifier>>&  ident) -> void {
            std::cout << "SimpleVisitor visiting Identifier\n";
        }

         virtual inline auto visit(const ceto::propagate_const<std::shared_ptr<const ListLiteral>>&  list_literal) -> void {
            std::cout << "SimpleVisitor visiting ListLiteral\n";
        }

};

struct RecordingVisitor : public BaseVisitor {

using BaseVisitor::BaseVisitor;

    decltype(std::string {""}) record = std::string {""};

         virtual inline auto visit(const ceto::propagate_const<std::shared_ptr<const Node>>&  node) -> void {
            (this -> record) += "RecordingVisitor visiting Node\n";
        }

         virtual inline auto visit(const ceto::propagate_const<std::shared_ptr<const Identifier>>&  ident) -> void {
            (this -> record) += "RecordingVisitor visiting Identifier\n";
        }

         virtual inline auto visit(const ceto::propagate_const<std::shared_ptr<const ListLiteral>>&  list_literal) -> void {
            const auto self = ceto::shared_from(this);
            (this -> record) += "RecordingVisitor visiting ListLiteral\n";
            const auto args = (*ceto::mad(list_literal)).args;
            ceto::safe_for_loop<!std::is_reference_v<decltype(args)> && ceto::OwningContainer<std::remove_cvref_t<decltype(args)>>>(args, [&](auto &&ceto__private__lambda_param1) -> ceto::LoopControl {
    const auto arg = ceto__private__lambda_param1;
                (*ceto::mad(arg)).accept(self);
    return ceto::LoopControl::Continue;
});        }

};

    auto main() -> int {
        const auto node = ceto::make_shared_propagate_const<const Node>();
        const auto ident = ceto::make_shared_propagate_const<const Identifier>("a");
        auto simple_visitor { ceto::make_shared_propagate_const<SimpleVisitor>() } ;
        (*ceto::mad(ident)).accept(simple_visitor);
        (*ceto::mad(node)).accept(simple_visitor);
        auto recording_visitor { ceto::make_shared_propagate_const<RecordingVisitor>() } ;
        (*ceto::mad(ident)).accept(recording_visitor);
        (*ceto::mad(node)).accept(recording_visitor);
        const std::vector<ceto::propagate_const<std::shared_ptr<const Node>>> list_args = std::vector<ceto::propagate_const<std::shared_ptr<const Node>>>{ident, ident, ident}; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(std::vector<ceto::propagate_const<std::shared_ptr<const Node>>>{ident, ident, ident}), std::remove_cvref_t<decltype(list_args)>>);
        const auto list_literal = ceto::make_shared_propagate_const<const ListLiteral>(list_args);
        (*ceto::mad(list_literal)).accept(simple_visitor);
        (*ceto::mad(list_literal)).accept(recording_visitor);
        std::cout << (*ceto::mad(recording_visitor)).record;
    }

