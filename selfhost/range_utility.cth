include <ranges>
include <numeric>
include <tuple>

unsafe()

namespace (ceto.util)

if (defined(__clang__) and __clang_major__ < 16:
    # poor ranges supprt with current apple clang (15). This is good enough for internal use:

    def (range, start: size_t, stop: size_t:
        r: mut = std.vector<size_t> (stop - start);
        std.iota(r.begin(), r.end(), start)
        return r
    ) : std.vector<size_t>

    def (range, stop: size_t:
        return range(0u, stop)
    )

    def (reversed: template<typename: Element>, container: const:std.vector<Element>:ref:
        rev = std.vector<Element> (container.rbegin(), container.rend())
        return rev
    )

else:

    def (range: template<typename:...:Args>, args: mut:Args:ref:ref:...:
        if ((sizeof...)(Args) == 1:
            zero : std.remove_cvref_t<typename:std.tuple_element<0, std.tuple<Args...>>::type> = 0
            return std.ranges.iota_view(zero, std.forward<Args>(args)...)
        else:
            return std.ranges.iota_view(std.forward<Args>(args)...)
        ) : constexpr
    ) : decltype(auto)

    def (reversed: template<typename:...:Args>, args: mut:Args:ref:ref:...:
        return std.views.reverse(std.forward<Args>(args)...)
    ) : decltype(auto)

) : preprocessor
