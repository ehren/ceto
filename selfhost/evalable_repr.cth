include (visitor)
include (ast)

unsafe()


struct (EvalableAstReprVisitor(BaseVisitor<EvalableAstReprVisitor>):
    preserve_source_loc: bool
    ceto_evalable: bool
    # unless we start defining combatibility shims like node_list(Identifier("x"), IntegerLiteral("1")),
    # a python evalable ast is not necessarily a ceto evalable one (e.g. ceto/c++ ctad must specify the type of the args)

    repr = ""s

    def (generate_loc: mut, node:
        if (not self.preserve_source_loc:
            return
        )
        # preserve source location but don't worry about the source string for now
        loc = node.source.loc
        self.repr += 'SourceLoc(None, ' + std.to_string(loc) + ')'
    )

    def (visit: override:mut, node: Node.class:
        self.repr += node.classname() + "("

        if (node.func:
            node.func.accept(*this)
            self.repr += ", "
        )

        self.repr += "["
        for (arg in node.args:
            arg.accept(*this)
            self.repr += ", "
        )

        self.repr += "]"s + if (self.ceto_evalable: ": Node" else: "") + ", "

        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: UnOp.class:
        self.repr += node.classname() + '("' +  node.op + '", ['
        node.args[0].accept(*this)
        self.repr += "]"s + if (self.ceto_evalable: ": Node" else: "") + ", "
        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: LeftAssociativeUnOp.class:
        self.repr += node.classname() + '("' +  node.op + '", ['
        node.args[0].accept(*this)
        self.repr += "]"s + if (self.ceto_evalable: ": Node" else: "") + ", "
        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: BinOp.class:
        self.repr += node.classname() + '("' +  node.op + '", ['
        args: mut:auto:ref:ref = node.args
        for (arg in args:
            arg.accept(*this)
            self.repr += ", "
        )
        self.repr += "]"s + if (self.ceto_evalable: ": Node" else: "") + ", "
        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: Identifier.class:
        self.repr += node.classname() + '("' +  node.repr() + '"'
        self.repr += ", "
        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: StringLiteral.class:
        self.repr += node.classname() + "(" +  node.escaped() + ", "

        if (node.prefix:
            node.prefix.accept(*this)
        else:
            self.repr += "None"
        )
        self.repr += ", "

        if (node.suffix:
            node.suffix.accept(*this)
        else:
            self.repr += "None"
        )
        self.repr += ", "
        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: IntegerLiteral.class:
        self.repr += node.classname() + '("' + node.integer_string + '", '
        if (node.suffix:
            node.suffix.accept(*this)
        else:
            self.repr += "None"
        )
        self.repr += ", "
        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: FloatLiteral.class:
        self.repr += node.classname() + '("' + node.float_string + '", '
        if (node.suffix:
            node.suffix.accept(*this)
        else:
            self.repr += "None"
        )
        self.repr += ", "
        self.generate_loc(node)
        self.repr += ")"
    )
)
