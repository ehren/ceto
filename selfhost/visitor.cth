unsafe()

class (Node)
class (UnOp)
class (LeftAssociativeUnOp)
class (BinOp)
class (TypeOp)
class (SyntaxTypeOp)
class (AttributeAccess)
class (ArrowOp)
class (ScopeResolution)
class (Assign)
class (NamedParameter)
class (BitwiseOrOp)
class (EqualsCompareOp)
class (Identifier)
class (Call)
class (ArrayAccess)
class (BracedCall)
class (Template)
class (StringLiteral)
class (IntegerLiteral)
class (FloatLiteral)
class (ListLike_)
class (ListLiteral)
class (TupleLiteral)
class (BracedLiteral)
class (Block)
class (Module)
class (RedundantParens)
class (InfixWrapper_)

struct (Visitor:
    def (visit: virtual:mut, node: Node.class): void = 0
    def (visit: virtual:mut, node: UnOp.class): void = 0
    def (visit: virtual:mut, node: LeftAssociativeUnOp.class): void = 0
    def (visit: virtual:mut, node: BinOp.class): void = 0
    def (visit: virtual:mut, node: TypeOp.class): void = 0
    def (visit: virtual:mut, node: SyntaxTypeOp.class): void = 0
    def (visit: virtual:mut, node: AttributeAccess.class): void = 0
    def (visit: virtual:mut, node: ArrowOp.class): void = 0
    def (visit: virtual:mut, node: Assign.class): void = 0
    def (visit: virtual:mut, node: ScopeResolution.class): void = 0
    def (visit: virtual:mut, node: NamedParameter.class): void = 0
    def (visit: virtual:mut, node: BitwiseOrOp.class): void = 0
    def (visit: virtual:mut, node: EqualsCompareOp.class): void = 0
    def (visit: virtual:mut, node: Identifier.class): void = 0
    def (visit: virtual:mut, node: Call.class): void = 0
    def (visit: virtual:mut, node: ArrayAccess.class): void = 0
    def (visit: virtual:mut, node: BracedCall.class): void = 0
    def (visit: virtual:mut, node: Template.class): void = 0
    def (visit: virtual:mut, node: StringLiteral.class): void = 0
    def (visit: virtual:mut, node: IntegerLiteral.class): void = 0
    def (visit: virtual:mut, node: FloatLiteral.class): void = 0
    def (visit: virtual:mut, node: ListLike_.class): void = 0
    def (visit: virtual:mut, node: ListLiteral.class): void = 0
    def (visit: virtual:mut, node: TupleLiteral.class): void = 0
    def (visit: virtual:mut, node: BracedLiteral.class): void = 0
    def (visit: virtual:mut, node: Block.class): void = 0
    def (visit: virtual:mut, node: Module.class): void = 0
    def (visit: virtual:mut, node: RedundantParens.class): void = 0
    def (visit: virtual:mut, node: InfixWrapper_.class): void = 0
)

struct (BaseVisitor<class:Derived>(Visitor):
    ### Taken from https://github.com/symengine/symengine/blob/master/symengine/visitor.h
    ### Useful so that e.g. you can visit Node for general traversal while visiting a
    ### handful of subclasses for specific logic (without needing to implement visit for all node types).

    def (visit: override:mut, node: Node.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: UnOp.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: LeftAssociativeUnOp.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: BinOp.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: TypeOp.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: SyntaxTypeOp.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: AttributeAccess.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: ArrowOp.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: Assign.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: ScopeResolution.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: NamedParameter.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: BitwiseOrOp.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: EqualsCompareOp.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: Identifier.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: Call.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: ArrayAccess.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: BracedCall.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: Template.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: StringLiteral.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: IntegerLiteral.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: FloatLiteral.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: ListLike_.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: ListLiteral.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: TupleLiteral.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: BracedLiteral.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: Block.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: Module.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: RedundantParens.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )

    def (visit: override:mut, node: InfixWrapper_.class:
        static_cast<Derived:pointer>(this)->visit(node)
    )
)
