#pragma once

#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"

#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
#include "ceto_private_append_to_pushback.donotedit.autogenerated.h"
;
#include <map>
;
#include <unordered_map>
;
#include <ranges>
;
#include <functional>
;
#include <span>
;
#include <variant>
;
#include "ast.donotedit.autogenerated.h"
;
#include "visitor.donotedit.autogenerated.h"
;
#include "range_utility.donotedit.autogenerated.h"
;
// unsafe;
#if _MSC_VER
    #include <windows.h>
;
    
    #define CETO_DLSYM GetProcAddress
    #define CETO_DLOPEN LoadLibraryA
    #define CETO_DLCLOSE FreeLibrary
    ;
#else
    #include <dlfcn.h>
;
    
    #define CETO_DLSYM dlsym
    #define CETO_DLOPEN(L) dlopen(L, RTLD_NOW)
    #define CETO_DLCLOSE dlclose
    ;
#endif

struct SemanticAnalysisError : public std::runtime_error {

using std::runtime_error::runtime_error;

};

struct MacroDefinition : public ceto::shared_object, public std::enable_shared_from_this<MacroDefinition> {

    ceto::propagate_const<std::shared_ptr<const Node>> defmacro_node;

    ceto::propagate_const<std::shared_ptr<const Node>> pattern_node;

    std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>> parameters;

    std::string dll_path = {};

    std::string impl_function_name = {};

    explicit MacroDefinition(ceto::propagate_const<std::shared_ptr<const Node>> defmacro_node, ceto::propagate_const<std::shared_ptr<const Node>> pattern_node, std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>> parameters) : defmacro_node(std::move(defmacro_node)), pattern_node(std::move(pattern_node)), parameters(parameters) {}

    MacroDefinition() = delete;

};

struct MacroScope : public ceto::object {

    MacroScope const * parent = nullptr; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(nullptr), std::remove_cvref_t<decltype(parent)>>);

    std::vector<ceto::propagate_const<std::shared_ptr<const MacroDefinition>>> macro_definitions = std::vector<ceto::propagate_const<std::shared_ptr<const MacroDefinition>>>{}; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(std::vector<ceto::propagate_const<std::shared_ptr<const MacroDefinition>>>{}), std::remove_cvref_t<decltype(macro_definitions)>>);

        inline auto add_definition(const ceto::propagate_const<std::shared_ptr<const MacroDefinition>>&  defn) -> void {
            ceto::append_or_push_back(this -> macro_definitions, defn);
        }

        inline auto enter_scope() const -> ceto::propagate_const<std::unique_ptr<MacroScope>> {
            auto s = ceto::make_unique_propagate_const<MacroScope>();
            (*ceto::mad(s)).parent = this;
            return s;
        }

};

    inline auto is_optional_pattern(const ceto::propagate_const<std::shared_ptr<const Node>>&  pattern,  const std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>> &  params) -> auto {
        if (!(std::dynamic_pointer_cast<const Identifier>(ceto::get_underlying(pattern)) != nullptr)) {
            return false;
        }
        const auto patt_param_it = (*ceto::mad(params)).find((*ceto::mad_smartptr((*ceto::mad(pattern)).name())).value());
        if (patt_param_it != (*ceto::mad(params)).end()) {
            const auto patt_param = (patt_param_it -> second);
            if ((std::dynamic_pointer_cast<const TypeOp>(ceto::get_underlying(patt_param)) != nullptr)) {
                auto rhs { ceto::bounds_check((*ceto::mad(patt_param)).args, 1) } ;
                auto is_alternational { false } ;
                while (const auto r = ceto::propagate_const<std::shared_ptr<const BitwiseOrOp>>(std::dynamic_pointer_cast<const BitwiseOrOp>(ceto::get_underlying(rhs)))) {                    is_alternational = true;
                    rhs = (*ceto::mad(r)).rhs();
                }
                if (is_alternational && ((*ceto::mad(rhs)).name() == "None")) {
                    return true;
                }
            }
        }
        return false;
    }

    template <typename ceto__private__T126, typename ceto__private__T227>
auto macro_matches_args(const ceto__private__T126& args, const ceto__private__T227& pattern_args,  const std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>> &  params, const decltype(false) is_reversed = false) -> std::optional<std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>>> {
        auto pattern_iterator { (*ceto::mad(pattern_args)).begin() } ;
        auto arg_iterator { (*ceto::mad(args)).begin() } ;
        auto submatches { std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>>{} } ;
        while (true) {            if (pattern_iterator == (*ceto::mad(pattern_args)).end()) {
                if (arg_iterator != (*ceto::mad(args)).end()) {
                    return {};
                } else {
                    break;
                }
            }
            auto subpattern { (*pattern_iterator) } ;
            if ((std::dynamic_pointer_cast<const Identifier>(ceto::get_underlying(subpattern)) != nullptr)) {
                const auto search = (*ceto::mad(params)).find((*ceto::mad_smartptr((*ceto::mad(subpattern)).name())).value());
                if (search != (*ceto::mad(params)).end()) {
                    const auto param_name = (search -> first);
                    const auto matched_param = (search -> second);
                    if (const auto type_match = ceto::propagate_const<std::shared_ptr<const TypeOp>>(std::dynamic_pointer_cast<const TypeOp>(ceto::get_underlying(matched_param)))) {
                        if (const auto list_param = ceto::propagate_const<std::shared_ptr<const ListLiteral>>(std::dynamic_pointer_cast<const ListLiteral>(ceto::get_underlying((*ceto::mad(type_match)).rhs())))) {
                            if ((*ceto::mad((*ceto::mad(list_param)).args)).size() != 1) {
                                throw SemanticAnalysisError{"bad ListLiteral args in macro param"};
                            }
                            const auto wildcard_list_type = ceto::bounds_check((*ceto::mad(list_param)).args, 0);
                            if (!(std::dynamic_pointer_cast<const Identifier>(ceto::get_underlying(wildcard_list_type)) != nullptr)) {
                                throw SemanticAnalysisError{"bad ListLiteral arg type in macro param"};
                            }
                            const auto wildcard_list_name = (*ceto::mad(type_match)).lhs();
                            if (!(std::dynamic_pointer_cast<const Identifier>(ceto::get_underlying(wildcard_list_name)) != nullptr)) {
                                throw SemanticAnalysisError{"arg of type ListLiteral must be an identifier"};
                            }
                            const auto wildcard_type_op = ceto::make_shared_propagate_const<const TypeOp>(":", std::vector<ceto::propagate_const<std::shared_ptr<const Node>>>{wildcard_list_name, wildcard_list_type});
                            const std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>> wildcard_list_params = {{(*ceto::mad_smartptr((*ceto::mad(wildcard_list_name)).name())).value(), wildcard_type_op}};
                            std::vector<ceto::propagate_const<std::shared_ptr<const Node>>> wildcard_list_matches = std::vector<ceto::propagate_const<std::shared_ptr<const Node>>>{}; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(std::vector<ceto::propagate_const<std::shared_ptr<const Node>>>{}), std::remove_cvref_t<decltype(wildcard_list_matches)>>);
                            while (arg_iterator != (*ceto::mad(args)).end()) {                                const auto arg = (*arg_iterator);
                                if (macro_matches(arg, wildcard_list_name, wildcard_list_params)) {
                                    (wildcard_list_matches).push_back(arg);
                                } else {
                                    break;
                                }
                                arg_iterator += 1;
                            }
                            if (is_reversed) {
                                std::reverse((*ceto::mad(wildcard_list_matches)).begin(), (*ceto::mad(wildcard_list_matches)).end());
                            }
                            ceto::bounds_check(submatches, param_name) = ceto::make_shared_propagate_const<const ListLiteral>(wildcard_list_matches);
                            pattern_iterator += 1;
                            if (pattern_iterator == (*ceto::mad(pattern_args)).end()) {
                                if (arg_iterator != (*ceto::mad(args)).end()) {
                                    return {};
                                }
                                break;
                            }
                        }
                    }
                }
            }
            if (arg_iterator == (*ceto::mad(args)).end()) {
                while (pattern_iterator != (*ceto::mad(pattern_args)).end()) {                    if (!is_optional_pattern((*pattern_iterator), params)) {
                        return {};
                    }
                    pattern_iterator += 1;
                }
                return submatches;
            }
            const auto arg = (*arg_iterator);
            const auto m = macro_matches(arg, subpattern, params);
            if (m) {
                (*ceto::mad(submatches)).insert((*ceto::mad(m)).begin(), (*ceto::mad(m)).end());
            } else {
                if (!is_optional_pattern(subpattern, params)) {
                    return {};
                }
            }
            arg_iterator += 1;
            pattern_iterator += 1;
        }
        return submatches;
    }

    inline auto macro_matches(const ceto::propagate_const<std::shared_ptr<const Node>>&  node, const ceto::propagate_const<std::shared_ptr<const Node>>&  pattern,  const std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>> &  params) -> std::optional<std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>>> {
        if ((std::dynamic_pointer_cast<const Identifier>(ceto::get_underlying(pattern)) != nullptr)) {
            const auto search = (*ceto::mad(params)).find((*ceto::mad_smartptr((*ceto::mad(pattern)).name())).value());
            if (search != (*ceto::mad(params)).end()) {
                const auto param_name = (search -> first);
                const auto matched_param = (search -> second);
                if ((std::dynamic_pointer_cast<const Identifier>(ceto::get_underlying(matched_param)) != nullptr)) {
                    return std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>>{{param_name, node}};
                } else if (const auto typeop = ceto::propagate_const<std::shared_ptr<const TypeOp>>(std::dynamic_pointer_cast<const TypeOp>(ceto::get_underlying(matched_param)))) {
                    const auto param_type = (*ceto::mad(typeop)).rhs();
                    if ((std::dynamic_pointer_cast<const Identifier>(ceto::get_underlying(param_type)) != nullptr)) {
                        if ((((*ceto::mad(param_type)).name() == "BinOp") && (std::dynamic_pointer_cast<const BinOp>(ceto::get_underlying(node)) != nullptr)) || (((*ceto::mad(param_type)).name() == "UnOp") && (std::dynamic_pointer_cast<const UnOp>(ceto::get_underlying(node)) != nullptr)) || ((*ceto::mad(param_type)).name() == "Node") || ((*ceto::mad(node)).classname() == (*ceto::mad((*ceto::mad(typeop)).rhs())).name())) {
                            return std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>>{{param_name, node}};
                        }
                    } else if (const auto or_type = ceto::propagate_const<std::shared_ptr<const BitwiseOrOp>>(std::dynamic_pointer_cast<const BitwiseOrOp>(ceto::get_underlying(param_type)))) {
                        const std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>> lhs_alternate_param = {{param_name, ceto::make_shared_propagate_const<const TypeOp>(":", std::vector {{matched_param, (*ceto::mad(or_type)).lhs()}})}};
                        if (const auto m = macro_matches(node, pattern, lhs_alternate_param)) {
                            return m;
                        }
                        const std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>> rhs_alternate_param = {{param_name, ceto::make_shared_propagate_const<const TypeOp>(":", std::vector {{matched_param, (*ceto::mad(or_type)).rhs()}})}};
                        if (const auto m = macro_matches(node, pattern, rhs_alternate_param)) {
                            return m;
                        }
                    }
                }
            }
        } else if (const auto binop_pattern = ceto::propagate_const<std::shared_ptr<const BinOp>>(std::dynamic_pointer_cast<const BinOp>(ceto::get_underlying(pattern)))) {
            std::vector<ceto::propagate_const<std::shared_ptr<const Node>>> idents = std::vector<ceto::propagate_const<std::shared_ptr<const Node>>>{}; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(std::vector<ceto::propagate_const<std::shared_ptr<const Node>>>{}), std::remove_cvref_t<decltype(idents)>>);
            ceto::safe_for_loop<!std::is_reference_v<decltype(((*ceto::mad(binop_pattern)).args))> && ceto::OwningContainer<std::remove_cvref_t<decltype((*ceto::mad(binop_pattern)).args)>>>((*ceto::mad(binop_pattern)).args, [&](const auto a) -> ceto::LoopControl {
                if ((std::dynamic_pointer_cast<const Identifier>(ceto::get_underlying(a)) != nullptr)) {
                    (idents).push_back(a);
                }
    return ceto::LoopControl::Continue;
});            
    
                static_assert(requires { std::begin(idents) + 2; }, "not a contiguous container");
                size_t ceto__private__size31 = std::size(idents);
                for (size_t ceto__private__idx30 = 0; ; ceto__private__idx30++) {
                    if (std::size(idents) != ceto__private__size31) {
                        std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                        std::terminate();
                    }
                    if (ceto__private__idx30 >= ceto__private__size31) {
                        break;
                    }
                    const auto i = idents[ceto__private__idx30];
                                    const auto search = (*ceto::mad(params)).find((*ceto::mad_smartptr((*ceto::mad(i)).name())).value());
                            if (search != (*ceto::mad(params)).end()) {
                                const auto param_name = (search -> first);
                                const auto typed_param = ceto::propagate_const<std::shared_ptr<const TypeOp>>(std::dynamic_pointer_cast<const TypeOp>(ceto::get_underlying(search -> second)));
                                if (!typed_param) {
                                    continue;
                                }
                                if (const auto or_param = ceto::propagate_const<std::shared_ptr<const BitwiseOrOp>>(std::dynamic_pointer_cast<const BitwiseOrOp>(ceto::get_underlying((*ceto::mad(typed_param)).rhs())))) {
                                    if (((*ceto::mad((*ceto::mad(or_param)).lhs())).name() == "None") || ((*ceto::mad((*ceto::mad(or_param)).rhs())).name() == "None")) {
                                        std::optional<decltype([&](const auto a) {
                                            if ((*ceto::mad(a)).name() != (*ceto::mad(i)).name()) {
                                                const auto m = macro_matches(node, a, params);
                                                if (m) {
                                                    return m;
                                                }
                                            }
                throw "loop end";
            }(*std::begin((*ceto::mad(binop_pattern)).args)))> ceto__private__return_var28;
            bool ceto__private__did_return29 = false;
            ceto::safe_for_loop<!std::is_reference_v<decltype(((*ceto::mad(binop_pattern)).args))> && ceto::OwningContainer<std::remove_cvref_t<decltype((*ceto::mad(binop_pattern)).args)>>>((*ceto::mad(binop_pattern)).args, [&](const auto a) -> ceto::LoopControl {
                                            if ((*ceto::mad(a)).name() != (*ceto::mad(i)).name()) {
                                                const auto m = macro_matches(node, a, params);
                                                if (m) {
            ceto__private__return_var28.emplace(m);
            ceto__private__did_return29 = true;
            return ceto::LoopControl::Break;
                                                }
                                            }
                return ceto::LoopControl::Continue;
            });if (ceto__private__did_return29) {
                return std::move(*ceto__private__return_var28);
            }
                                    }
                                }
                            }

                }
            }
        if ((*ceto::mad(node)).classname() != (*ceto::mad(pattern)).classname()) {
            return {};
        }
        if (((*ceto::mad(node)).func == nullptr) != ((*ceto::mad(pattern)).func == nullptr)) {
            return {};
        }
        if (((*ceto::mad((*ceto::mad(node)).args)).size() == 0) && ((*ceto::mad(node)).func == nullptr) && ((*ceto::mad(pattern)).func == nullptr)) {
            if ((*ceto::mad(node)).equals(pattern)) {
                return std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>>{};
            }
            return {};
        }
        auto submatches { std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>>{} } ;
        if ((*ceto::mad(node)).func) {
            const auto m = macro_matches((*ceto::mad(node)).func, (*ceto::mad(pattern)).func, params);
            if (!m) {
                return {};
            }
            (*ceto::mad(submatches)).insert((*ceto::mad(m)).begin(), (*ceto::mad(m)).end());
        }
        const auto left_to_right_matches = macro_matches_args((*ceto::mad(node)).args, (*ceto::mad(pattern)).args, params);
        if ((*ceto::mad((*ceto::mad(pattern)).args)).size() > 1) {
            const auto right_to_left_matches = macro_matches_args(ceto::util::reversed((*ceto::mad(node)).args), ceto::util::reversed((*ceto::mad(pattern)).args), params, true);
            if (right_to_left_matches && (!left_to_right_matches || ((*ceto::mad(left_to_right_matches)).size() < (*ceto::mad(right_to_left_matches)).size()))) {
                (*ceto::mad(submatches)).insert((*ceto::mad(right_to_left_matches)).begin(), (*ceto::mad(right_to_left_matches)).end());
                return submatches;
            }
        }
        if (!left_to_right_matches) {
            return {};
        }
        (*ceto::mad(submatches)).insert((*ceto::mad(left_to_right_matches)).begin(), (*ceto::mad(left_to_right_matches)).end());
        return submatches;
    }

using MacroImplResult = std::variant<ceto::propagate_const<std::shared_ptr<const Node>>,ceto::macros::Skip>;
    inline auto call_macro_impl(const ceto::propagate_const<std::shared_ptr<const MacroDefinition>>&  definition,  const std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>> &  match) -> MacroImplResult {
        const auto handle = CETO_DLOPEN((*ceto::mad((*ceto::mad(definition)).dll_path)).c_str());
        if (!handle) {
            throw std::runtime_error("Failed to open macro dll: " + (*ceto::mad(definition)).dll_path);
        }
        const auto fptr = CETO_DLSYM(handle, (*ceto::mad((*ceto::mad(definition)).impl_function_name)).c_str());
        if (!fptr) {
            throw std::runtime_error("Failed to find symbol " + (*ceto::mad(definition)).impl_function_name + " in dll " + (*ceto::mad(definition)).dll_path);
        }
        const auto f = reinterpret_cast<decltype(+[]( const std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>> &  m) -> MacroImplResult {
                return nullptr;
                })>(fptr);
        return (*f)(match);
    }

struct ExpandResult : public ceto::object {

    bool did_expand;

    ceto::propagate_const<std::shared_ptr<const Node>> _node;

    std::map<ceto::propagate_const<std::shared_ptr<const Node>>,std::vector<ceto::propagate_const<std::shared_ptr<const MacroDefinition>>>> & _skipped_definitions;

        ~ExpandResult() {
            if (this -> did_expand) {
                return;
            }
            const auto it = (*ceto::mad(this -> _skipped_definitions)).find(this -> _node);
            if (it != (*ceto::mad(this -> _skipped_definitions)).end()) {
                (*ceto::mad(it -> second)).clear();
            }
        }

    explicit ExpandResult(bool did_expand, ceto::propagate_const<std::shared_ptr<const Node>> _node, std::map<ceto::propagate_const<std::shared_ptr<const Node>>,std::vector<ceto::propagate_const<std::shared_ptr<const MacroDefinition>>>> & _skipped_definitions) : did_expand(did_expand), _node(std::move(_node)), _skipped_definitions(_skipped_definitions) {}

    ExpandResult() = delete;

};

struct MacroDefinitionVisitor : public BaseVisitor<MacroDefinitionVisitor> {

    std::function<void(ceto::propagate_const<std::shared_ptr<const MacroDefinition>>, const std::unordered_map<ceto::propagate_const<std::shared_ptr<const Node>>,ceto::propagate_const<std::shared_ptr<const Node>>> &)> on_visit_definition;

    ceto::propagate_const<std::unique_ptr<MacroScope>> current_scope = nullptr; static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(nullptr), std::remove_cvref_t<decltype(current_scope)>>);

    std::unordered_map<ceto::propagate_const<std::shared_ptr<const Node>>,ceto::propagate_const<std::shared_ptr<const Node>>> replacements = {};

    std::map<ceto::propagate_const<std::shared_ptr<const Node>>,std::vector<ceto::propagate_const<std::shared_ptr<const MacroDefinition>>>> skipped_definitions = {};

        inline auto expand(const ceto::propagate_const<std::shared_ptr<const Node>>&  node) -> auto {
            auto const * scope { (&(this -> current_scope)) -> get() } ;
            while (scope) {                for( const auto &  definition : ceto::util::reversed(scope -> macro_definitions)) {
                    auto skip_definition { false } ;
                    for(  const auto & [key, defns] : (this -> skipped_definitions)) {
                        if (ceto::util::contains(defns, definition)) {
                            skip_definition = true;
                            break;
                        }
                    }
                    if (skip_definition) {
                        continue;
                    }
                    const auto match = macro_matches(node, (*ceto::mad(definition)).pattern_node, (*ceto::mad(definition)).parameters);
                    if (match) {
                        const auto result_variant = call_macro_impl(definition, (*ceto::mad_smartptr(match)).value());
                        if (std::holds_alternative<ceto::macros::Skip>(result_variant)) {
                            (*ceto::mad(ceto::bounds_check(this -> skipped_definitions, node))).push_back(definition);
                        } else {
                            const auto replacement = std::get<ceto::propagate_const<std::shared_ptr<const Node>>>(result_variant);
                            if (replacement && (replacement != node)) {
                                ceto::bounds_check(this -> replacements, node) = replacement;
                                (*ceto::mad(replacement)).accept((*this));
                                const auto did_expand = true;
                                return ExpandResult{did_expand, node, this -> skipped_definitions};
                            }
                        }
                    }
                }
                scope = (scope -> parent);
            }
            const auto did_expand = false;
            return ExpandResult{did_expand, node, this -> skipped_definitions};
        }

        inline auto visit(const Node&  n) -> void override {
            const auto node = ceto::shared_from((&n));
            const auto expand_result = this -> expand(node);
            if ((*ceto::mad(expand_result)).did_expand) {
                return;
            }
            if ((*ceto::mad(node)).func) {
                (*ceto::mad((*ceto::mad(node)).func)).accept((*this));
            }
            ceto::safe_for_loop<!std::is_reference_v<decltype(((*ceto::mad(node)).args))> && ceto::OwningContainer<std::remove_cvref_t<decltype((*ceto::mad(node)).args)>>>((*ceto::mad(node)).args, [&](const auto arg) -> ceto::LoopControl {
                (*ceto::mad(arg)).accept((*this));
    return ceto::LoopControl::Continue;
});        }

        inline auto visit(const Call&  call_node) -> void override {
            const auto node = ceto::shared_from((&call_node));
            const auto expand_result = this -> expand(node);
            if ((*ceto::mad(expand_result)).did_expand) {
                return;
            }
            (*ceto::mad((*ceto::mad(node)).func)).accept((*this));
            ceto::safe_for_loop<!std::is_reference_v<decltype(((*ceto::mad(node)).args))> && ceto::OwningContainer<std::remove_cvref_t<decltype((*ceto::mad(node)).args)>>>((*ceto::mad(node)).args, [&](const auto arg) -> ceto::LoopControl {
                (*ceto::mad(arg)).accept((*this));
    return ceto::LoopControl::Continue;
});            if ((*ceto::mad((*ceto::mad(node)).func)).name() != "defmacro") {
                return;
            }
            if (!(std::dynamic_pointer_cast<const Module>(ceto::get_underlying((*ceto::mad(node)).parent())) != nullptr)) {
                return;
            }
            if ((*ceto::mad((*ceto::mad(node)).args)).size() < 2) {
                throw SemanticAnalysisError{"bad defmacro args"};
            }
            const auto pattern = ceto::bounds_check((*ceto::mad(node)).args, 0);
            if (!(std::dynamic_pointer_cast<const Block>(ceto::get_underlying((*ceto::mad((*ceto::mad(node)).args)).back())) != nullptr)) {
                throw SemanticAnalysisError{"last defmacro arg must be a Block"};
            }
            auto parameters { std::map<std::string,ceto::propagate_const<std::shared_ptr<const Node>>>{} } ;
            #if defined(__clang__) && (__clang_major__ < 16)
                const auto match_args = std::vector((*ceto::mad((*ceto::mad(node)).args)).cbegin() + 1, (*ceto::mad((*ceto::mad(node)).args)).cend() - 1);
            #else
                const auto match_args = std::span((*ceto::mad((*ceto::mad(node)).args)).cbegin() + 1, (*ceto::mad((*ceto::mad(node)).args)).cend() - 1);
            #endif

            
    
                static_assert(requires { std::begin(match_args) + 2; }, "not a contiguous container");
                size_t ceto__private__size33 = std::size(match_args);
                for (size_t ceto__private__idx32 = 0; ; ceto__private__idx32++) {
                    if (std::size(match_args) != ceto__private__size33) {
                        std::cerr << "Container size changed during iteration: " << __FILE__ << " line: "<< __LINE__ << "\n";
                        std::terminate();
                    }
                    if (ceto__private__idx32 >= ceto__private__size33) {
                        break;
                    }
                    const auto arg = match_args[ceto__private__idx32];
                                    const auto name = [&]() {if ((std::dynamic_pointer_cast<const Identifier>(ceto::get_underlying(arg)) != nullptr)) {
                                return (*ceto::mad_smartptr((*ceto::mad(arg)).name())).value();
                            } else if (!(std::dynamic_pointer_cast<const TypeOp>(ceto::get_underlying(arg)) != nullptr)) {
                                throw SemanticAnalysisError{"bad defmacro param type"};
                            } else if (!(std::dynamic_pointer_cast<const Identifier>(ceto::get_underlying(ceto::bounds_check((*ceto::mad(arg)).args, 0))) != nullptr)) {
                                throw SemanticAnalysisError{"bad typed defmacro param"};
                            } else {
                                return (*ceto::mad_smartptr((*ceto::mad(ceto::bounds_check((*ceto::mad(arg)).args, 0))).name())).value();
                            }}()
            ;
                            const auto i = (*ceto::mad(parameters)).find(name);
                            if (i != (*ceto::mad(parameters)).end()) {
                                throw SemanticAnalysisError{"duplicate defmacro params"};
                            }
                            (*ceto::mad_smartptr(parameters)).emplace(name, arg);

                }
                const auto defn = ceto::make_shared_propagate_const<const MacroDefinition>(node, pattern, parameters);
            (*ceto::mad(this -> current_scope)).add_definition(defn);
            this -> on_visit_definition(defn, this -> replacements);
        }

        inline auto visit(const Module&  node) -> void override {
            auto s = ceto::make_unique_propagate_const<MacroScope>();
            (this -> current_scope) = std::move(s);
            ceto::safe_for_loop<!std::is_reference_v<decltype(((*ceto::mad(node)).args))> && ceto::OwningContainer<std::remove_cvref_t<decltype((*ceto::mad(node)).args)>>>((*ceto::mad(node)).args, [&](const auto arg) -> ceto::LoopControl {
                (*ceto::mad(arg)).accept((*this));
    return ceto::LoopControl::Continue;
});        }

        inline auto visit(const Block&  block_node) -> void override {
            ceto::propagate_const<std::unique_ptr<MacroScope>> outer = std::move(this -> current_scope); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(std::move(this -> current_scope)), std::remove_cvref_t<decltype(outer)>>);
            (this -> current_scope) = (*ceto::mad(outer)).enter_scope();
            const auto node = ceto::shared_from((&block_node));
            const auto expand_result = this -> expand(node);
            if ((*ceto::mad(expand_result)).did_expand) {
                return;
            }
            ceto::safe_for_loop<!std::is_reference_v<decltype(((*ceto::mad(node)).args))> && ceto::OwningContainer<std::remove_cvref_t<decltype((*ceto::mad(node)).args)>>>((*ceto::mad(node)).args, [&](const auto arg) -> ceto::LoopControl {
                (*ceto::mad(arg)).accept((*this));
    return ceto::LoopControl::Continue;
});            (this -> current_scope) = std::move(outer);
        }

    explicit MacroDefinitionVisitor(std::function<void(ceto::propagate_const<std::shared_ptr<const MacroDefinition>>, const std::unordered_map<ceto::propagate_const<std::shared_ptr<const Node>>,ceto::propagate_const<std::shared_ptr<const Node>>> &)> on_visit_definition) : on_visit_definition(on_visit_definition) {}

    MacroDefinitionVisitor() = delete;

};

    inline auto expand_macros(const ceto::propagate_const<std::shared_ptr<const Module>>&  node, const std::function<void(ceto::propagate_const<std::shared_ptr<const MacroDefinition>>, const std::unordered_map<ceto::propagate_const<std::shared_ptr<const Node>>,ceto::propagate_const<std::shared_ptr<const Node>>> &)>  on_visit) -> std::unordered_map<ceto::propagate_const<std::shared_ptr<const Node>>,ceto::propagate_const<std::shared_ptr<const Node>>> {
        auto visitor { MacroDefinitionVisitor{on_visit} } ;
        (*ceto::mad(node)).accept(visitor);
        return (*ceto::mad(visitor)).replacements;
    }

